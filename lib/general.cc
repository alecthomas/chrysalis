
#ifdef __WATCOMC__
#include <i86.h>
#endif

#include <stdio.h>
#include <malloc.h>
#include <string.h>
#include "general.h"

int costable[ 256 ] = {
  256, 255, 255, 255, 254, 254, 253, 252,
  251, 249, 248, 246, 244, 243, 241, 238,
  236, 234, 231, 228, 225, 222, 219, 216,
  212, 209, 205, 201, 197, 193, 189, 185,
  181, 176, 171, 167, 162, 157, 152, 147,
  142, 136, 131, 126, 120, 115, 109, 103,
  97, 92, 86, 80, 74, 68, 62, 56,
  49, 43, 37, 31, 25, 18, 12, 6,
  0, -6, -12, -18, -25, -31, -37, -43,
  -49, -56, -62, -68, -74, -80, -86, -92,
  -97, -103, -109, -115, -120, -126, -131, -136,
  -142, -147, -152, -157, -162, -167, -171, -176,
  -181, -185, -189, -193, -197, -201, -205, -209,
  -212, -216, -219, -222, -225, -228, -231, -234,
  -236, -238, -241, -243, -244, -246, -248, -249,
  -251, -252, -253, -254, -254, -255, -255, -255,
  -256, -255, -255, -255, -254, -254, -253, -252,
  -251, -249, -248, -246, -244, -243, -241, -238,
  -236, -234, -231, -228, -225, -222, -219, -216,
  -212, -209, -205, -201, -197, -193, -189, -185,
  -181, -176, -171, -167, -162, -157, -152, -147,
  -142, -136, -131, -126, -120, -115, -109, -103,
  -97, -92, -86, -80, -74, -68, -62, -56,
  -49, -43, -37, -31, -25, -18, -12, -6,
  0, 6, 12, 18, 25, 31, 37, 43,
  49, 56, 62, 68, 74, 80, 86, 92,
  97, 103, 109, 115, 120, 126, 131, 136,
  142, 147, 152, 157, 162, 167, 171, 176,
  181, 185, 189, 193, 197, 201, 205, 209,
  212, 216, 219, 222, 225, 228, 231, 234,
  236, 238, 241, 243, 244, 246, 248, 249,
  251, 252, 253, 254, 254, 255, 255, 255 };

int
  sintable[ 256 ] = {
  0, 6, 12, 18, 25, 31, 37, 43,
  49, 56, 62, 68, 74, 80, 86, 92,
  97, 103, 109, 115, 120, 126, 131, 136,
  142, 147, 152, 157, 162, 167, 171, 176,
  181, 185, 189, 193, 197, 201, 205, 209,
  212, 216, 219, 222, 225, 228, 231, 234,
  236, 238, 241, 243, 244, 246, 248, 249,
  251, 252, 253, 254, 254, 255, 255, 255,
  256, 255, 255, 255, 254, 254, 253, 252,
  251, 249, 248, 246, 244, 243, 241, 238,
  236, 234, 231, 228, 225, 222, 219, 216,
  212, 209, 205, 201, 197, 193, 189, 185,
  181, 176, 171, 167, 162, 157, 152, 147,
  142, 136, 131, 126, 120, 115, 109, 103,
  97, 92, 86, 80, 74, 68, 62, 56,
  49, 43, 37, 31, 25, 18, 12, 6,
  0, -6, -12, -18, -25, -31, -37, -43,
  -49, -56, -62, -68, -74, -80, -86, -92,
  -97, -103, -109, -115, -120, -126, -131, -136,
  -142, -147, -152, -157, -162, -167, -171, -176,
  -181, -185, -189, -193, -197, -201, -205, -209,
  -212, -216, -219, -222, -225, -228, -231, -234,
  -236, -238, -241, -243, -244, -246, -248, -249,
  -251, -252, -253, -254, -254, -255, -255, -255,
  -256, -255, -255, -255, -254, -254, -253, -252,
  -251, -249, -248, -246, -244, -243, -241, -238,
  -236, -234, -231, -228, -225, -222, -219, -216,
  -212, -209, -205, -201, -197, -193, -189, -185,
  -181, -176, -171, -167, -162, -157, -152, -147,
  -142, -136, -131, -126, -120, -115, -109, -103,
  -97, -92, -86, -80, -74, -68, -62, -56,
  -49, -43, -37, -31, -25, -18, -12, -6 };

char sqrt_table[] = {  0, 0, 0, 0, 192, 127, 0, 0, 2, 255, 0, 0, 199, 125, 1, 0,
	16, 252, 1, 0, 223, 121, 2, 0, 52, 247, 2, 0, 19, 116, 3, 0,
	123, 240, 3, 0, 111, 108, 4, 0, 238, 231, 4, 0, 252, 98, 5, 0,
	152, 221, 5, 0, 197, 87, 6, 0, 130, 209, 6, 0, 211, 74, 7, 0,
	182, 195, 7, 0, 47, 60, 8, 0, 61, 180, 8, 0, 227, 43, 9, 0,
	32, 163, 9, 0, 246, 25, 10, 0, 103, 144, 10, 0, 114, 6, 11, 0,
	26, 124, 11, 0, 94, 241, 11, 0, 65, 102, 12, 0, 195, 218, 12, 0,
	228, 78, 13, 0, 167, 194, 13, 0, 11, 54, 14, 0, 18, 169, 14, 0,
	189, 27, 15, 0, 12, 142, 15, 0, 0, 0, 16, 0, 154, 113, 16, 0,
	220, 226, 16, 0, 196, 83, 17, 0, 86, 196, 17, 0, 145, 52, 18, 0,
	118, 164, 18, 0, 6, 20, 19, 0, 65, 131, 19, 0, 41, 242, 19, 0,
	190, 96, 20, 0, 1, 207, 20, 0, 242, 60, 21, 0, 146, 170, 21, 0,
	227, 23, 22, 0, 228, 132, 22, 0, 150, 241, 22, 0, 250, 93, 23, 0,
	17, 202, 23, 0, 220, 53, 24, 0, 90, 161, 24, 0, 140, 12, 25, 0,
	116, 119, 25, 0, 17, 226, 25, 0, 101, 76, 26, 0, 111, 182, 26, 0,
	50, 32, 27, 0, 172, 137, 27, 0, 223, 242, 27, 0, 203, 91, 28, 0,
	113, 196, 28, 0, 209, 44, 29, 0, 236, 148, 29, 0, 194, 252, 29, 0,
	85, 100, 30, 0, 164, 203, 30, 0, 175, 50, 31, 0, 121, 153, 31, 0,
	0, 0, 32, 0, 70, 102, 32, 0, 74, 204, 32, 0, 14, 50, 33, 0,
	146, 151, 33, 0, 215, 252, 33, 0, 220, 97, 34, 0, 163, 198, 34, 0,
	43, 43, 35, 0, 117, 143, 35, 0, 131, 243, 35, 0, 83, 87, 36, 0,
	231, 186, 36, 0, 62, 30, 37, 0, 90, 129, 37, 0, 59, 228, 37, 0,
	225, 70, 38, 0, 77, 169, 38, 0, 127, 11, 39, 0, 119, 109, 39, 0,
	54, 207, 39, 0, 188, 48, 40, 0, 10, 146, 40, 0, 31, 243, 40, 0,
	253, 83, 41, 0, 164, 180, 41, 0, 20, 21, 42, 0, 77, 117, 42, 0,
	80, 213, 42, 0, 29, 53, 43, 0, 181, 148, 43, 0, 23, 244, 43, 0,
	69, 83, 44, 0, 62, 178, 44, 0, 4, 17, 45, 0, 149, 111, 45, 0,
	243, 205, 45, 0, 30, 44, 46, 0, 22, 138, 46, 0, 219, 231, 46, 0,
	111, 69, 47, 0, 208, 162, 47, 0, 0, 0, 48, 0, 255, 92, 48, 0,
	204, 185, 48, 0, 106, 22, 49, 0, 214, 114, 49, 0, 19, 207, 49, 0,
	32, 43, 50, 0, 254, 134, 50, 0, 172, 226, 50, 0, 44, 62, 51, 0,
	124, 153, 51, 0, 159, 244, 51, 0, 147, 79, 52, 0, 90, 170, 52, 0,
	243, 4, 53, 0, 158, 185, 53, 0, 150, 109, 54, 0, 221, 32, 55, 0,
	117, 211, 55, 0, 96, 133, 56, 0, 161, 54, 57, 0, 56, 231, 57, 0,
	40, 151, 58, 0, 115, 70, 59, 0, 27, 245, 59, 0, 33, 163, 60, 0,
	135, 80, 61, 0, 78, 253, 61, 0, 121, 169, 62, 0, 9, 85, 63, 0,
	0, 0, 64, 0, 95, 170, 64, 0, 40, 84, 65, 0, 92, 253, 65, 0,
	254, 165, 66, 0, 13, 78, 67, 0, 141, 245, 67, 0, 126, 156, 68, 0,
	225, 66, 69, 0, 185, 232, 69, 0, 6, 142, 70, 0, 202, 50, 71, 0,
	6, 215, 71, 0, 188, 122, 72, 0, 236, 29, 73, 0, 152, 192, 73, 0,
	194, 98, 74, 0, 106, 4, 75, 0, 146, 165, 75, 0, 58, 70, 76, 0,
	101, 230, 76, 0, 19, 134, 77, 0, 69, 37, 78, 0, 252, 195, 78, 0,
	58, 98, 79, 0, 0, 0, 80, 0, 78, 157, 80, 0, 38, 58, 81, 0,
	137, 214, 81, 0, 120, 114, 82, 0, 243, 13, 83, 0, 253, 168, 83, 0,
	149, 67, 84, 0, 188, 221, 84, 0, 117, 119, 85, 0, 191, 16, 86, 0,
	155, 169, 86, 0, 11, 66, 87, 0, 16, 218, 87, 0, 169, 113, 88, 0,
	217, 8, 89, 0, 160, 159, 89, 0, 254, 53, 90, 0, 245, 203, 90, 0,
	134, 97, 91, 0, 177, 246, 91, 0, 119, 139, 92, 0, 217, 31, 93, 0,
	215, 179, 93, 0, 115, 71, 94, 0, 174, 218, 94, 0, 135, 109, 95, 0,
	0, 0, 96, 0, 25, 146, 96, 0, 212, 35, 97, 0, 49, 181, 97, 0,
	48, 70, 98, 0, 211, 214, 98, 0, 25, 103, 99, 0, 4, 247, 99, 0,
	149, 134, 100, 0, 204, 21, 101, 0, 169, 164, 101, 0, 46, 51, 102, 0,
	90, 193, 102, 0, 47, 79, 103, 0, 174, 220, 103, 0, 214, 105, 104, 0,
	169, 246, 104, 0, 39, 131, 105, 0, 80, 15, 106, 0, 38, 155, 106, 0,
	169, 38, 107, 0, 217, 177, 107, 0, 183, 60, 108, 0, 68, 199, 108, 0,
	127, 81, 109, 0, 107, 219, 109, 0, 7, 101, 110, 0, 83, 238, 110, 0,
	81, 119, 111, 0, 0, 0, 112, 0, 98, 136, 112, 0, 118, 16, 113, 0,
	62, 152, 113, 0, 186, 31, 114, 0, 234, 166, 114, 0, 207, 45, 115, 0,
	106, 180, 115, 0, 186, 58, 116, 0, 192, 192, 116, 0, 126, 70, 117, 0,
	242, 203, 117, 0, 30, 81, 118, 0, 3, 214, 118, 0, 160, 90, 119, 0,
	246, 222, 119, 0, 5, 99, 120, 0, 206, 230, 120, 0, 82, 106, 121, 0,
	145, 237, 121, 0, 139, 112, 122, 0, 64, 243, 122, 0, 177, 117, 123, 0,
	223, 247, 123, 0, 202, 121, 124, 0, 114, 251, 124, 0, 216, 124, 125, 0,
	252, 253, 125, 0, 222, 126, 126, 0, 127, 255, 126, 0, 224, 127, 127, 0,
	};

char *tokenise( char *&source, char *target, char *whitespace,
  char *operators )
{
char *start;

  if ( source[ 0 ] == 0 || source == NULL ) return NULL;
  while ( strchr( whitespace, source[ 0 ] ) && source[ 0 ] != 0 ) source++;
  if ( source[ 0 ] == 0 ) return NULL;
  start = source;
  if ( strchr( operators, source[ 0 ] ) && source[ 0 ] )
  {
    source++;
    if ( source[ 0 ] == 0 ) return NULL;
  } else
    while ( !strchr( operators, source[ 0 ] ) &&
      !strchr( whitespace, source[ 0 ] ) &&
      !strchr( operators, source[ 0 ] ) && source[ 0 ] ) source++;
  strncpy( target, start, source - start );
  target[ source - start ] = 0;
  return target;
}

#ifdef __WATCOMC__
int simRMint( int i, RMIREGS *r )
{
union REGS regs;
struct SREGS sregs;

  memset( &regs, 0, sizeof( REGS ) );
  memset( &sregs, 0, sizeof( SREGS ) );

  regs.w.ax = 0x0300;
  regs.h.bl = i;
  sregs.es = FP_SEG( r );
  regs.x.edi = FP_OFF( r );
  int386x( 0x31, &regs, &regs, &sregs );
  if ( regs.w.cflag & 0x1 ) return FALSE;
  return TRUE;
}

char far *lowmalloc( int l )
{
union REGS regs;

  memset( &regs, 0, sizeof( REGS ) );
  regs.w.ax = 0x0100;
  regs.w.bx = l >> 4;
  int386( 0x31, &regs, &regs );
  return (char*)MK_FP( regs.w.dx, regs.w.ax );
}

void lowfree( char far *p )
{
union REGS regs;

  memset( &regs, 0, sizeof( REGS ) );
  regs.w.ax = 0x0101;
  regs.w.dx = FP_SEG( p );
  int386( 0x31, &regs, &regs );
}
#endif
